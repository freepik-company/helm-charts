{{ template "chart.header" . }}
{{ template "chart.description" . }}

{{ template "chart.versionBadge" . }}{{ template "chart.typeBadge" . }}{{ template "chart.appVersionBadge" . }}

{{ template "chart.requirementsSection" . }}

{{ template "chart.valuesSection" . }}

{{ template "helm-docs.versionFooter" . }}

## Examples

- Sendmail Secret example:

```yaml
kind: Secret
apiVersion: v1
metadata:
  name: server-secret
stringData:
  url: "smtp.server.com"
  port: "25"
  user: "userid"
  password: "password"
  tls: "False"
```

- Listener configuration example:

```yaml
listeners:
  - name: pullrequest
    interceptors:
    - ref:
        name: "cel"
      params:
      - name: "filter"
        value: "header.match('X-Event-Key', 'pullrequest:created') || header.match('X-Event-Key', 'pullrequest:updated')"
      - name: "overlays"
        value:
        - key: X-Hub-Signature
          expression: "1234567"
        - key: truncated_sha
          expression: "body.pullrequest.source.commit.hash.truncate(7)"
    bindings:
      type: pull_requests
      project: $(body.repository.name)
      repository: git@bitbucket.org:$(body.repository.full_name).git
      branch: $(body.pullrequest.source.branch.name)
      pipeline: $(body.pullrequest.source.branch.name)
      commit: $(body.pullrequest.source.commit.hash)
      shortCommit: $(extensions.truncated_sha)
      author: $(body.pullrequest.author.display_name)
      email: N/A
  - name: push
    interceptors:
    - ref:
        name: "cel"
      params:
      - name: "filter"
        value: "header.match('X-Event-Key', 'repo:push') && body.push.changes.exists(x, x.new.type == 'branch') && ! body.push.changes.exists(x, x.new.type == 'tag')"
      - name: "overlays"
        value:
        - key: X-Hub-Signature
          expression: "1234567"
        - key: truncated_sha
          expression: "body.push.changes[0].new.target.hash.truncate(7)"
        - key: author
          expression: "body.push.changes[0].new.target.author.raw.split(' <')[0]"
        - key: email
          expression: "body.push.changes[0].new.target.author.raw.split('<')[1].replace('>', '')"
    bindings:
      type: branches
      project: $(body.repository.name)
      repository: git@bitbucket.org:$(body.repository.full_name).git
      branch: $(body.push.changes[0].new.name)
      pipeline: $(body.push.changes[0].new.name)
      commit: $(body.push.changes[0].new.target.hash)
      shortCommit: $(extensions.truncated_sha)
      author: $(extensions.author)
      email: $(extensions.email)
  - name: tag
    interceptors:
    - ref:
        name: "cel"
      params:
      - name: "filter"
        value: "header.match('X-Event-Key', 'repo:push') && body.push.changes.exists(x, x.new.type == 'branch') && body.push.changes.exists(x, x.new.type == 'tag')"
      - name: "overlays"
        value:
        - key: X-Hub-Signature
          expression: "1234567"
        - key: truncated_sha
          expression: "body.push.changes[0].new.target.hash.truncate(7)"
        - key: author
          expression: "body.push.changes[0].new.target.author.raw.split(' <')[0]"
        - key: email
          expression: "body.push.changes[0].new.target.author.raw.split('<')[1].replace('>', '')"
    bindings:
      type: tags
      project: $(body.repository.name)
      repository: git@bitbucket.org:$(body.repository.full_name).git
      branch: $(body.push.changes[0].new.name)
      pipeline: $(body.push.changes[1].new.name)
      commit: $(body.push.changes[0].new.target.hash)
      shortCommit: $(extensions.truncated_sha)
      author: $(extensions.author)
      email: $(extensions.email)
```

## Inherited params

Next parameters are inherited to a running pipeline to use there in precoded and custom tasks:

- *params.type*: Type of pipelines launched. It could be `branches`, `pullrequests`, `tags` and `custom`
- *params.project*: Name of the project
- *params.repository*: Repository URL
- *params.branch*: Branch name
- *params.pipeline*: Pipeline name use for the pipeline regular expression
- *params.commit*: Commit hash
- *params.shortCommit*: Commit hash shorted
- *params.author*: Author name of the commit if present
- *params.email*: Email of the author's commit if present
