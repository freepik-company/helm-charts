{{- range .Values.listeners }}
apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: {{ include "launcher.fullname" $ }}-{{ .name }}
  labels:
    {{- include "launcher.labels" $ | nindent 4 }}

spec:
  description: |
    This pipeline is designed to be launched through the evenlistener trigger of the 'launcher'
    helm chart package. It works cloning a repository given by parameters and parsing and applying
    a tekton pipeline runs from a custom file called 'fc-pipelines.yaml'.

  params:
  - name: eventlistener
    type: string
  - name: trigger
    type: string
  - name: type
    type: string
  - name: project
    type: string
  - name: repository
    type: string
  - name: branch
    type: string
  - name: pipeline
    type: string
  - name: commit
    type: string
  - name: shortCommit
    type: string
  - name: author
    type: string
  - name: email
    type: string

  tasks:
  - name: launcher
    params:
    - name: repository
      value: "$(params.repository)"
    - name: branch
      value: "$(params.branch)"
    - name: commit
      value: "$(params.commit)"
    - name: shortCommit
      value: "$(params.shortCommit)"
    - name: author
      value: "$(params.author)"
    - name: email
      value: "$(params.email)"
    - name: projectName
      value: $(params.project)
    - name: type
      value: $(params.type)
    - name: pipeline
      value: "$(params.pipeline)"
    - name: eventlistener
      value: $(params.eventlistener)
    - name: trigger
      value: $(params.trigger)
    - name: gitCloneDaysAgo
      value: {{ $.Values.gitCloneDaysAgo }}

    taskSpec:
      params:
      - name: repository
      - name: branch
      - name: commit
      - name: shortCommit
      - name: projectName
      - name: pipeline
      - name: trigger
      - name: eventlistener
      - name: type
      - name: email
      - name: author
      - name: gitCloneDaysAgo

      steps:
      - name: clone
        image: {{ $.Values.tasksImage }}
        volumeMounts:
        {{- if .gitCredentials }}
        ## VER COMO HACER COMPATIBLE SIN CREDENCIALES
        - name: git-credentials
          mountPath: /fc/git-credentials
        {{- end }}
        - name: workspace-data
          mountPath: /fc/workspace-data
        workingDir: "/fc/workspace-data"
        script: |
          #!/usr/bin/env sh
          set -eux

          if [ -f /fc/git-credentials/.git-credentials ] && [ -f /fc/git-credentials/.gitconfig ] ; then
            cp /fc/git-credentials/.git-credentials /root/.git-credentials
            cp /fc/git-credentials/.gitconfig /root/.gitconfig
            chmod 400 /root/.git-credentials
            chmod 400 /root/.gitconfig
          elif [ -d /fc/git-credentials ]; then
            cp -R "/fc/git-credentials" /root/.ssh
            chmod 700 /root/.ssh
            chmod -R 400 /root/.ssh/*
          fi

          DATE_TIMESTAMP=$(date +"%s %z" -u -d "$(params.gitCloneDaysAgo) days ago")

          git config --global --add safe.directory /fc/workspace-data && \
          git clone --shallow-since="${DATE_TIMESTAMP}" --no-tags \
            -b $(params.branch) \
            $(params.repository) \
            /fc/workspace-data && \
          git reset --hard $(params.commit)

      - name: launch
        image: {{ $.Values.tasksImage }}
        volumeMounts:
        - name: workspace-data
          mountPath: /fc/workspace-data
        - name: pipelines-kubernetes-resources
          mountPath: /fc/pipelines-kubernetes-resources
        workingDir: "/fc/workspace-data"
        script: |
          #!/usr/bin/env sh
          set -eux

          if [ -f fc-pipelines.yaml ]; then
            PIPELINES_FILE=fc-pipelines.yaml
          elif [ -f fc-pipelines.yml ]; then
            PIPELINES_FILE=fc-pipelines.yml
          else
            echo "ERROR. The pipeline file does not exist."
            exit 1
          fi

          IMAGE={{ $.Values.pipelineGeneratorChart }}
          VERSION=$(cat $PIPELINES_FILE | head -n 1 | cut -d: -f2 | tr -d "\"")
          # BUG: Todo lo que viene a continuaci칩n hasta la instalaci칩n del chart
          # es proclive a ser usado para inyectar c칩digo yaml para recursos de kubernetes
          # y par치metros de kubectl o comandos del sistema no controlados.
          # Se propone corregir interpretando adecuadamente el YAML y validando los datos
          # obtenidos.
          NAMESPACE=$(cat $PIPELINES_FILE | grep -e "^namespace" | cut -d: -f2 | tr -d "\" ")
          CREATE_NS=$(cat $PIPELINES_FILE | grep -e "^createNamespace" | cut -d: -f2 | tr -d "\" ")
          CUSTOM_LABELS=$(cat $PIPELINES_FILE | grep -e "^customLabels" | cut -d: -f2 | tr -d "\"")

          if [ "$CREATE_NS" = "yes" ] || [ "$CREATE_NS" = "true" ] || [ "$CREATE_NS" = "1" ]; then
            cat /fc/pipelines-kubernetes-resources/namespace | sed "s/\${NAME}/${NAMESPACE}/g" | \
                    kubectl apply -f -
            [ ! -z "${CUSTOM_LABELS}" ] && \
              kubectl label namespace ${NAMESPACE} ${CUSTOM_LABELS}
            cat /fc/pipelines-kubernetes-resources/serviceAccount | sed "s/\${NAME}/${NAMESPACE}/g" | \
                    kubectl apply -f -
          fi

          export HELM_EXPERIMENTAL_OCI=1

          if [ "{{ $.Values.pipelineGeneratorGCPAuthentication }}" = "true" ]; then
            REGISTRY=$( echo ${IMAGE} | cut -d'/' -f 1 )
            gcloud auth application-default print-access-token | \
              helm registry login -u oauth2accesstoken --password-stdin https://${REGISTRY}
          fi

          helm template $(params.projectName) oci://${IMAGE} --version ${VERSION} -f ${PIPELINES_FILE} --create-namespace \
            --set configuration.type="$(params.type)" \
            --set configuration.eventlistener="$(params.eventlistener)" \
            --set configuration.trigger="$(params.trigger)" \
            --set configuration.projectName="$(params.projectName)" \
            --set configuration.branch="$(params.branch)" \
            --set configuration.pipeline="$(params.pipeline)" \
            --set configuration.author="$(params.author)" \
            --set configuration.email="$(params.email)" \
            --set configuration.commit="$(params.commit)" \
            --set configuration.shortCommit="$(params.shortCommit)" \
            --set configuration.repository="$(params.repository)" > .pipeline-manifest-$(params.commit).yaml

          if [ $(cat .pipeline-manifest-$(params.commit).yaml | wc -l) -gt 1 ]; then
            kubectl create -f .pipeline-manifest-$(params.commit).yaml
          fi

  finally:
  - name: failed-sendmail
    when:
    - input: "$(tasks.status)"
      operator: in
      values:
      - "Failed"
      - "None"
    taskRef:
      name: {{ include "launcher.fullnameShort" $ }}-sendmail
      kind: ClusterTask
    params:
    - name: server
      value: {{ $.Values.sendmailSecret }}
    - name: subject
      value: {{ $.Values.sendmailSubject }}
    - name: body
      value: |
        {{ $.Values.sendmailBody | nindent 10 }}
    - name: sender
      value: "<{{ $.Values.sendmailSender }}>"
    - name: recipients
      value: "<$(params.email)>"
---
{{- end }}
